# Error Handling Standards

## üîµ Error Handling Rules

### Error Type Rules
- **Always throw AppError subclasses for application errors**
- **Never throw generic Error objects in business logic**
- **Use ErrorHandler.getInstance() for consistent error processing**
- **Include context and details in error objects**

### Error Throwing Pattern
```typescript
// ‚úÖ Good - use specific error types
import { ValidationError, AuthenticationError, NotFoundError } from '@/app/lib/errors/app-errors';

// Validation error
if (!email) {
  throw new ValidationError('Email is required', 'email');
}

// Authentication error  
if (!user) {
  throw new AuthenticationError('User not authenticated');
}

// Not found error
if (!foundUser) {
  throw new NotFoundError('User', userId);
}

// ‚ùå Bad - generic Error
throw new Error('Something went wrong');
```

### Error Handling Pattern
```typescript
// ‚úÖ Good - use ErrorHandler
import { ErrorHandler } from '@/app/lib/errors/error-handler';

try {
  // ... business logic
} catch (error) {
  const errorHandler = ErrorHandler.getInstance();
  return errorHandler.handleApiError(error as Error, context, req);
}

// ‚ùå Bad - manual error handling
catch (error) {
  return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
}
```

### Validation Error Handling
```typescript
// ‚úÖ Good - structured validation errors
import { ValidationError, MissingFieldError } from '@/app/lib/errors/app-errors';

const validateUser = (data: any) => {
  if (!data.email) {
    throw new MissingFieldError('email');
  }
  if (!isValidEmail(data.email)) {
    throw new ValidationError('Invalid email format', 'email');
  }
};

// ‚ùå Bad - generic validation
if (!data.email) {
  throw new Error('Email is required');
}
```

### Business Logic Error Handling
```typescript
// ‚úÖ Good - specific business errors
import { BusinessLogicError, ConflictError } from '@/app/lib/errors/app-errors';

if (user.promptCount <= 0) {
  throw new BusinessLogicError('No prompts remaining. Please upgrade.');
}

if (existingUser) {
  throw new ConflictError('User', email);
}

// ‚ùå Bad - unclear business errors
throw new Error('User exists');
```

### Error Context Requirements
- Include user context in all error logs
- Include request context and correlation IDs
- Include component and action identifiers
- Include relevant business context

### Error Response Structure
```typescript
// ‚úÖ Good - structured error response
{
  "success": false,
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Email is required",
    "field": "email",
    "context": {
      "requestId": "req_123",
      "timestamp": "2024-01-01T00:00:00.000Z",
      "component": "user-service",
      "action": "create-user"
    }
  }
}

// ‚ùå Bad - unstructured error
{
  "error": "Something went wrong"
}
```
