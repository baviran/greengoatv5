# Security Rules

## üî¥ Critical Security Standards

### Data Protection Rules
- **Never log sensitive data (passwords, tokens, personal info)**
- **Sanitize user input before logging**
- **Use structured logging format: timestamp, level, message, context**

### API Security
- **Always validate input data before processing**
- **Use structured error handling for security issues**
- **Include request context in all operations**

### Security Examples
```typescript
// ‚úÖ Good - sanitized logging
logger.info('Request processed', { 
  requestId: req.id, 
  endpoint: '/api/data'
});

// ‚ùå Bad - sensitive data logged
logger.info('Request data', { 
  password: userData.password,
  token: apiToken
});

// ‚úÖ Good - input validation
const validateInput = (data: any) => {
  if (!data || typeof data !== 'object') {
    throw new ValidationError('Invalid data format');
  }
};

// ‚úÖ Good - data sanitization
const sanitizeInput = (userInput: string) => {
  return userInput.trim().slice(0, 1000); // Limit length
};
```

### Input Sanitization
```typescript
// ‚úÖ Good - sanitized input logging
logger.info('Processing request input', {
  inputLength: userInput.length,
  inputType: typeof userInput,
  component: 'input-processor'
});

// ‚ùå Bad - raw user input in logs
logger.info('Raw input received', { input: userInput });
```
