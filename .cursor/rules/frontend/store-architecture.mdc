# Store Architecture Rules

## 🟠 Store Architecture Standards

### Unified Store Usage
- **Always use the new unified store structure**
- **Never use old individual store imports**
- **Use app store composition for all state management**
- **Follow domain-specific store patterns**

### Store Import Patterns
```typescript
// ✅ Good - unified store usage
import { useAppStore, useAppChat, useAppSelector } from '@/app/lib/store/appStore';

// ✅ Good - domain-specific hooks
const { activeThreadId, sendMessage } = useAppChat();

// ✅ Good - performance-optimized selectors
const isLoading = useAppSelector(store => store.loading.globalLoading);

// ❌ Bad - old individual store imports
import { useChatStore } from './lib/store/chatStore';
import { useThemeStore } from './lib/store/themeStore';
```

### Store Initialization Rules
```typescript
// ✅ Good - app-level initialization
const { manager } = useAppStore();

useEffect(() => {
  manager.initialize();
}, [manager]);

// ❌ Bad - manual store initialization
useEffect(() => {
  initializeTheme();
  initializeStore();
}, [initializeTheme, initializeStore]);
```

### Performance-Optimized State Access
```typescript
// ✅ Good - memoized selectors
const activeThread = useAppSelector(store => 
  store.chat.activeThreadId 
    ? store.chat.threads.find(t => t.id === store.chat.activeThreadId)
    : null
);

// ✅ Good - domain-specific hooks for performance
const { activeThreadId, sendMessage } = useAppChat();

// ❌ Bad - accessing entire store unnecessarily
const { chat, ui, shared } = useAppStore();
```

### Store Event Handling
```typescript
// ✅ Good - use app actions for cross-store operations
import { appActions } from '@/app/lib/store/appStore';

const showSuccessMessage = (message: string) => {
  appActions.showSuccess('Success', message);
};

// ❌ Bad - direct store manipulation
const authStore = useAuthStore.getState();
await authStore.signOut();
```

### Store Cleanup Rules
```typescript
// ✅ Good - proper cleanup
useEffect(() => {
  return () => {
    // Cleanup is handled automatically by app store manager
  };
}, []);

// ✅ Good - explicit reset when needed
const { manager } = useAppStore();
const handleReset = async () => {
  await manager.reset();
};
```

### Domain Store Guidelines



#### Chat Domain
```typescript
// ✅ Good - chat operations
const { 
  activeThreadId, 
  threads, 
  sendMessage, 
  createNewThread,
  setActiveThread 
} = useAppChat();

// Use chat store for all chat operations
```

#### UI Domain
```typescript
// ✅ Good - UI state management
const theme = useAppSelector(store => store.theme.theme);
const notifications = useAppSelector(store => store.notification.notifications);

// Use app actions for UI operations
appActions.toggleTheme();
appActions.showSuccess('Title', 'Message');
```

@store-template.ts
