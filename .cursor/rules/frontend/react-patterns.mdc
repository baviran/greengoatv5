# React Patterns & Best Practices

## 🟢 React Development Standards

### React Hook Dependency Management

#### Safe useEffect Dependencies
```typescript
// ✅ Good - stable dependencies
useEffect(() => {
  const processData = async () => {
    // processing logic
  };
  
  if (data && isInitialized) {
    processData();
  }
}, [data, isInitialized]); // Only include stable values

// ❌ Bad - function in dependencies
useEffect(() => {
  if (data) {
    processData(); // Function recreated every render
  }
}, [data, processData]); // Causes unnecessary re-runs
```

#### Performance-Critical Hooks
```typescript
// ✅ Good - avoid excessive API calls
useEffect(() => {
  const updateData = async () => {
    if (id) { // Only when id actually changes
      const data = await fetchData(id);
      // Update data
    }
  };
  updateData();
}, [id]); // Not [fetchData]

// ❌ Bad - function dependency causes re-runs
useEffect(() => {
  updateData();
}, [updateData]); // Recreated every render
```

### Component Initialization Patterns
```typescript
// ✅ Good - wait for store initialization
const { data, isLoading, isInitialized } = useAppStore();

useEffect(() => {
  if (!isInitialized) {
    setStatus('loading');
    return;
  }
  
  if (data && isInitialized) {
    processData();
  }
}, [data, isInitialized]);

// ❌ Bad - immediate processing without waiting
useEffect(() => {
  if (data) {
    processData(); // May run before store is ready
  }
}, [data]);
```

### Cache Management Patterns

#### User Validation Caching
```typescript
// ✅ Good - cache validation results
const userValidationCache = new Map<string, {
  status: UserValidationStatus;
  error: string;
  timestamp: number;
}>();

const VALIDATION_CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

// Check cache first
const cached = userValidationCache.get(user.uid);
if (cached && (Date.now() - cached.timestamp) < VALIDATION_CACHE_DURATION) {
  setUserValidationStatus(cached.status);
  return;
}

// ❌ Bad - repeated validation calls
useEffect(() => {
  validateUser(); // Runs every time
}, [user]);
```

#### Cache Invalidation
```typescript
// ✅ Good - clear cache when data changes
useEffect(() => {
  if (dataId) {
    dataCache.delete(dataId);
  }
}, [dataId]);

// ❌ Bad - stale cache data
// No cache invalidation strategy
```

### Error Recovery Patterns

#### General Retry Logic
```typescript
// ✅ Good - retry with backoff
const apiCall = async (retries = 1) => {
  try {
    const response = await fetch('/api/data');
    if (!response.ok) throw new Error('API Error');
    return await response.json();
  } catch (error) {
    if (retries > 0) {
      // Retry once after delay
      setTimeout(async () => {
        try {
          return await apiCall(retries - 1);
        } catch (retryError) {
          logger.error('API retry failed', retryError);
        }
      }, 2000);
    }
    throw error;
  }
};

// ❌ Bad - no retry logic
const apiCall = async () => {
  return fetch('/api/data').then(res => res.json());
};
```

### Component Patterns

#### Store Integration
```typescript
// ✅ Good - store listener setup
if (typeof window !== 'undefined') {
  const setupStoreListener = () => {
    // Set up store event listeners for data changes
    store.subscribe((state) => {
      // Handle state changes
      updateComponent(state);
    });
  };
  
  setupStoreListener();
}

// ❌ Bad - direct state manipulation without store
updateState({ data: newData }); // Manual state management
```

### Component Composition Patterns
```typescript
// ✅ Good - component composition
const ChatInterface: React.FC = () => {
  const { activeThreadId } = useAppChat();
  
  return (
    <div className="chat-interface">
      <ChatHeader />
      <MessageList threadId={activeThreadId} />
      <MessageInput />
    </div>
  );
};

// ❌ Bad - monolithic component
const ChatInterface: React.FC = () => {
  // All logic in one component
  return (
    <div>
      {/* All UI in one component */}
    </div>
  );
};
```
