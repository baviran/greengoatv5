# Cursor Rules for GreenGoat v5

## 🔴 Critical Rules

### Logging Standards
- **Never use console.log, console.error, console.warn, or console.debug**
- **Always use Logger.getInstance() for logging**
- **Include context object with requestId, component, action when available**
- **Use appropriate log levels:**
  - `debug` for development debugging
  - `info` for business logic and normal flow
  - `warn` for recoverable issues
  - `error` for exceptions and failures

### Logging Context Requirements
```typescript
// ✅ Good - with context
const logger = Logger.getInstance();
const context = {
  requestId: req.headers.get('x-request-id'),
  component: 'user-service',
  action: 'create-user'
};
logger.info('User operation completed successfully', context);

// ❌ Bad - without context
console.log('User created successfully');
```

### Error Logging
```typescript
// ✅ Good - structured error logging
try {
  // ... code
} catch (error) {
  logger.error('User creation failed', error, context, {
    email: userData.email,
    attemptedRole: userData.role
  });
}

// ❌ Bad - console error
catch (error) {
  console.error('User creation failed:', error);
}
```

### Security Rules
- **Never log sensitive data (passwords, tokens, personal info)**
- **Sanitize user input before logging**
- **Use structured logging format: timestamp, level, message, context**

### Performance Rules
- **Use async logging in production environment**
- **Include request tracing with unique request IDs**
- **Log request start/end with duration for API calls**

## 🟡 API Route Rules

### API Response Standards
```typescript
// ✅ Use enhanced response middleware
export const POST = withApiResponse('component-name', 'action-name')(
  async (req: NextRequest, context: RequestContext) => {
    const logger = Logger.getInstance().withContext(context);
    
    logger.info('API request started', { endpoint: '/api/users' });
    // ... handler code
  }
);
```

### Request Logging
```typescript
// ✅ Log request lifecycle
export const POST = withRequestContext(async (req, context) => {
  const logger = Logger.getInstance().withContext(context);
  
  logger.requestStart('Processing user request');
  const startTime = Date.now();
  
  try {
    // ... processing
    logger.requestEnd('User request completed', startTime);
  } catch (error) {
    logger.error('User request failed', error);
    throw error;
  }
});
```

## 🟢 Service Layer Rules

### Service Logging
```typescript
// ✅ Component-specific logging
export class UserService {
  private logger = Logger.getInstance().withContext({
    component: 'user-service'
  });
  
  async createUser(userData: CreateUserData, context?: LogContext) {
    const mergedContext = { ...context, action: 'create-user' };
    
    this.logger.info('Starting user creation', mergedContext, {
      email: userData.email
    });
    
    try {
      // ... implementation
      this.logger.info('User created successfully', mergedContext, {
        userId: newUser.id
      });
    } catch (error) {
      this.logger.error('User creation failed', error, mergedContext);
      throw error;
    }
  }
}
```

## 🔵 Client-Side Rules

### Client-Side Logging
```typescript
// ✅ Client-side structured logging
const logger = Logger.getInstance();

// For user interactions
logger.info('User interaction', {
  component: 'chat-interface',
  action: 'message-sent',
  userId: user?.uid
});

// For errors
logger.error('Client error occurred', error, {
  component: 'chat-interface',
  action: 'message-failed',
  userId: user?.uid
});
```

## 🟣 Migration Rules

### Console.log Replacement
```typescript
// ❌ Replace these patterns
console.log('User authenticated:', user.uid);
console.error('Auth failed:', error);
console.warn('Rate limit exceeded');

// ✅ With these patterns
logger.info('User authenticated', { userId: user.uid, component: 'auth' });
logger.error('Authentication failed', error, { component: 'auth' });
logger.warn('Rate limit exceeded', { component: 'rate-limiter' });
```

### Backward Compatibility
- When migrating existing code, maintain original functionality
- Add context progressively - start with component, then add action/userId
- Use `Logger.getInstance().withContext()` for consistent context

## 🔍 Code Review Checklist

Before submitting code:
- [ ] No console.log/error/warn/debug statements
- [ ] All logging uses Logger.getInstance()
- [ ] Context objects include relevant information
- [ ] Error logging includes error object and context
- [ ] No sensitive data in logs
- [ ] Appropriate log levels used
- [ ] Request tracing implemented for API routes
- [ ] Component and action specified in context
- [ ] API responses use ApiResponseBuilder (never raw JSON)
- [ ] HTTP status codes use HTTP_STATUS constants
- [ ] Request context includes requestId and metadata
- [ ] Error responses include structured error codes
- [ ] Use AppError subclasses for application errors
- [ ] Never throw generic Error objects in business logic
- [ ] Error handling uses ErrorHandler.getInstance() methods
- [ ] Use unified store structure (useAppStore, useAppAuth, etc.)
- [ ] No direct imports of individual stores (useAuthContext, useChatStore, etc.)
- [ ] Store initialization uses app store manager
- [ ] Performance-optimized selectors with useAppSelector
- [ ] Cross-store operations use appActions
- [ ] Domain-specific hooks used appropriately
- [ ] Store cleanup handled properly
- [ ] Firebase auth operations use helper functions
- [ ] No direct store state manipulation outside actions
- [ ] Firebase auth state synchronization implemented
- [ ] Cache management for validation results
- [ ] Retry logic for authentication failures
- [ ] Proper useEffect dependency management
- [ ] Store performance monitoring enabled
- [ ] Authentication timing issues handled

## 🚀 Performance Guidelines

### Production Logging
- Use async logging for better performance
- Include request tracing for monitoring
- Log structured data for better parsing
- Use appropriate log levels to reduce noise

### Development Logging
- Use debug level for detailed debugging
- Include stack traces for errors
- Use pretty printing for better readability
- Log component boundaries for flow tracking

## 🟠 Store Architecture Rules

### Unified Store Usage
- **Always use the new unified store structure**
- **Never use old individual store imports**
- **Use app store composition for all state management**
- **Follow domain-specific store patterns**

### Store Import Patterns
```typescript
// ✅ Good - unified store usage
import { useAppStore, useAppChat, useAppSelector } from '@/app/lib/store/appStore';

// ✅ Good - domain-specific hooks
const { activeThreadId, sendMessage } = useAppChat();

// ✅ Good - performance-optimized selectors
const isLoading = useAppSelector(store => store.loading.globalLoading);

// ❌ Bad - old individual store imports
import { useAuthContext } from '@/context/auth-context';
import { useChatStore } from './lib/store/chatStore';
import { useThemeStore } from './lib/store/themeStore';
```

### Store Initialization Rules
```typescript
// ✅ Good - app-level initialization
const { manager } = useAppStore();

useEffect(() => {
  manager.initialize();
}, [manager]);

// ❌ Bad - manual store initialization
useEffect(() => {
  initializeTheme();
  initializeStore();
}, [initializeTheme, initializeStore]);
```

### Performance-Optimized State Access
```typescript
// ✅ Good - memoized selectors
const activeThread = useAppSelector(store => 
  store.chat.activeThreadId 
    ? store.chat.threads.find(t => t.id === store.chat.activeThreadId)
    : null
);

// ✅ Good - domain-specific hooks for performance
const { activeThreadId, sendMessage } = useAppChat();

// ❌ Bad - accessing entire store unnecessarily
const { auth, chat, ui, shared } = useAppStore();
```

### Store Event Handling
```typescript
// ✅ Good - use app actions for cross-store operations
import { appActions } from '@/app/lib/store/appStore';

const showSuccessMessage = (message: string) => {
  appActions.showSuccess('Success', message);
};

// ❌ Bad - direct store manipulation
const authStore = useAuthStore.getState();
await authStore.signOut();
```

### Store Cleanup Rules
```typescript
// ✅ Good - proper cleanup
useEffect(() => {
  return () => {
    // Cleanup is handled automatically by app store manager
  };
}, []);

// ✅ Good - explicit reset when needed
const { manager } = useAppStore();
const handleReset = async () => {
  await manager.reset();
};
```

### Domain Store Guidelines



#### Chat Domain
```typescript
// ✅ Good - chat operations
const { 
  activeThreadId, 
  threads, 
  sendMessage, 
  createNewThread,
  setActiveThread 
} = useAppChat();

// Use existing useAuthenticatedChatStore for complex operations
const { submitFeedback } = useAuthenticatedChatStore();
```

#### UI Domain
```typescript
// ✅ Good - UI state management
const theme = useAppSelector(store => store.theme.theme);
const notifications = useAppSelector(store => store.notification.notifications);

// Use app actions for UI operations
appActions.toggleTheme();
appActions.showSuccess('Title', 'Message');
```

### Store Migration Guidelines

#### Common Migration Patterns
```typescript
// ❌ Old Pattern -> ✅ New Pattern



// Theme usage
- import { useThemeStore } from './lib/store/themeStore';
- const { value: theme, toggleTheme } = useThemeStore();
+ import { useAppSelector, appActions } from '@/app/lib/store/appStore';
+ const theme = useAppSelector(store => store.theme.theme);
+ appActions.toggleTheme();

// Chat usage
- import { useChatStore } from './lib/store/chatStore';
- const { activeThreadId, sendMessage } = useChatStore();
+ import { useAppChat } from '@/app/lib/store/appStore';
+ const { activeThreadId, sendMessage } = useAppChat();

// Loading states
- const [loading, setLoading] = useState(false);
+ const isLoading = useAppSelector(store => store.loading.isLoading('operation-key'));
+ appActions.setLoading('operation-key', true);
```

#### Initialization Migration
```typescript
// ❌ Old initialization
useEffect(() => {
  initializeTheme();
  initializeStore();
}, []);

// ✅ New initialization
const { manager } = useAppStore();
useEffect(() => {
  manager.initialize();
}, [manager]);
```

#### Error Handling Migration
```typescript
// ❌ Old error handling
const [error, setError] = useState(null);

// ✅ New error handling
const hasErrors = useAppSelector(store => 
  Object.keys(store.error.errors).length > 0
);
appActions.setError('operation-key', errorMessage);
```

## 🔵 API Response Standards

### Response Format Rules
- **Always use ApiResponseBuilder for all API responses**
- **Never return raw JSON objects**
- **Use HTTP_STATUS constants instead of numeric codes**
- **Include request context in all responses**
- **Use structured error codes from ERROR_CODES**

### Success Response Pattern
```typescript
// ✅ Good - unified success response
const successResponse = ApiResponseBuilder.success(userData, context);
return createApiResponse(successResponse, HTTP_STATUS.OK);

// ❌ Bad - raw JSON response
return NextResponse.json({ success: true, data: userData });
```

### Error Response Pattern
```typescript
// ✅ Good - structured error response
const errorResponse = ApiResponseBuilder.validationError(
  'Email is required', 
  context, 
  'email'
);
return createApiResponse(errorResponse, HTTP_STATUS.BAD_REQUEST);

// ❌ Bad - raw error response
return NextResponse.json({ error: 'Email is required' }, { status: 400 });
```

### Paginated Response Pattern
```typescript
// ✅ Good - structured pagination
const pagination = createPaginationInfo(total, count, limit, offset);
const response = ApiResponseBuilder.paginated(data, pagination, context);
return createApiResponse(response, HTTP_STATUS.OK);

// ❌ Bad - manual pagination structure
return NextResponse.json({
  data: data,
  pagination: { total, count, limit, offset, hasMore }
});
```

### Route Handler Pattern
```typescript
// ✅ Good - use withApiResponse middleware
export const GET = withApiResponse('component-name', 'action-name')(
  async (request: NextRequest, authResult: AuthResultWithContext) => {
    const { user, context } = authResult;
    
    // Your logic here
    const data = await getDataFromService();
    
    const response = ApiResponseBuilder.success(data, context);
    return createApiResponse(response, HTTP_STATUS.OK);
  }
);

// ❌ Bad - manual auth and response handling
export const GET = withAuth(async (request: NextRequest, authResult) => {
  // Manual response handling without unified format
  return NextResponse.json({ data: result });
});
```

## 🔵 Error Handling Standards

### Error Type Rules
- **Always throw AppError subclasses for application errors**
- **Never throw generic Error objects in business logic**
- **Use ErrorHandler.getInstance() for consistent error processing**
- **Include context and details in error objects**

### Error Throwing Pattern
```typescript
// ✅ Good - use specific error types
import { ValidationError, AuthenticationError, NotFoundError } from '@/app/lib/errors/app-errors';

// Validation error
if (!email) {
  throw new ValidationError('Email is required', 'email');
}

// Authentication error  
if (!user) {
  throw new AuthenticationError('User not authenticated');
}

// Not found error
if (!foundUser) {
  throw new NotFoundError('User', userId);
}

// ❌ Bad - generic Error
throw new Error('Something went wrong');
```

### Error Handling Pattern
```typescript
// ✅ Good - use ErrorHandler
import { ErrorHandler } from '@/app/lib/errors/error-handler';

try {
  // ... business logic
} catch (error) {
  const errorHandler = ErrorHandler.getInstance();
  return errorHandler.handleApiError(error as Error, context, req);
}

// ❌ Bad - manual error handling
catch (error) {
  return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
}
```

### Validation Error Handling
```typescript
// ✅ Good - structured validation errors
import { ValidationError, MissingFieldError } from '@/app/lib/errors/app-errors';

const validateUser = (data: any) => {
  if (!data.email) {
    throw new MissingFieldError('email');
  }
  if (!isValidEmail(data.email)) {
    throw new ValidationError('Invalid email format', 'email');
  }
};

// ❌ Bad - generic validation
if (!data.email) {
  throw new Error('Email is required');
}
```

### Business Logic Error Handling
```typescript
// ✅ Good - specific business errors
import { BusinessLogicError, ConflictError } from '@/app/lib/errors/app-errors';

if (user.promptCount <= 0) {
  throw new BusinessLogicError('No prompts remaining. Please upgrade.');
}

if (existingUser) {
  throw new ConflictError('User', email);
}

// ❌ Bad - unclear business errors
throw new Error('User exists');
```

## 📋 Examples

### Complete API Route Example
```typescript
import { withAuth } from '@/lib/auth-middleware';
import { Logger } from '@/app/lib/utils/logger';

export const POST = withAuth(async (req, authResult) => {
  const { user, context } = authResult;
  const logger = Logger.getInstance().withContext({
    ...context,
    component: 'user-api',
    action: 'update-profile'
  });
  
  logger.requestStart('Profile update request');
  
  try {
    const userData = await req.json();
    
    logger.info('Updating user profile', {
      userId: user.uid,
      fields: Object.keys(userData)
    });
    
    const updatedUser = await userService.updateUser(user.email, userData);
    
    logger.info('Profile updated successfully', {
      userId: user.uid
    });
    
    return NextResponse.json({ user: updatedUser });
    
  } catch (error) {
    logger.error('Profile update failed', error, {
      userId: user.uid
    });
    
    return NextResponse.json(
      { error: 'Profile update failed' },
      { status: 500 }
    );
  }
});
``` 

## 🔄 Store Migration & Backward Compatibility

### Transition Strategy
- **Gradual Migration**: Migrate components one at a time
- **Backward Compatibility**: Keep old stores until all components migrated
- **Testing**: Ensure functionality remains intact during migration
- **Performance**: Monitor store performance after migration

### Temporary Compatibility Patterns
```typescript
// ✅ Good - transitional compatibility
// Keep existing useAuthenticatedChatStore for complex chat operations
const { submitFeedback } = useAuthenticatedChatStore();

// Use new store for simple operations
const { user } = useAppAuth();
const theme = useAppSelector(store => store.theme.theme);
```

### Migration Checklist for Components
- [ ] Replace old store imports with new unified imports
- [ ] Update initialization patterns to use app store manager
- [ ] Convert local state to store selectors where appropriate
- [ ] Replace manual error/loading handling with store patterns

- [ ] Test component functionality after migration
- [ ] Remove old store dependencies once verified

### Store Performance Monitoring
```typescript
// ✅ Monitor store performance
const { manager } = useAppStore();

// Get performance metrics
const metrics = manager.getPerformanceMetrics();

// Get storage information
const storageInfo = manager.getStorageInfo();
```



### Performance Guidelines

#### General Performance Patterns
```typescript
// ✅ Good - performance monitoring
export function monitorStorePerformance(storeName: string) {
  return function<T extends Record<string, any>>(store: T): T {
    logger.debug('Performance monitoring enabled for store', undefined, { storeName });
    return store; // Non-intrusive monitoring
  };
}
```

#### Component Performance
```typescript
// ✅ Good - structured component debugging
useEffect(() => {
  logger.debug('Component state changed', undefined, {
    component: 'my-component',
    hasData: !!data,
    isLoading
  });
}, [data, isLoading]);
```

### Cache Management Patterns

#### General Caching
```typescript
// ✅ Good - cache with expiration
const dataCache = new Map<string, {
  data: any;
  timestamp: number;
}>();

const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

// Check cache first
const cached = dataCache.get(key);
if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {
  return cached.data;
}

// ❌ Bad - no caching strategy
// Fetch data every time
```

### React Hook Dependency Management

#### Safe useEffect Dependencies
```typescript
// ✅ Good - stable dependencies
useEffect(() => {
  const processData = async () => {
    // processing logic
  };
  
  if (data && isInitialized) {
    processData();
  }
}, [data, isInitialized]); // Only include stable values

// ❌ Bad - function in dependencies
useEffect(() => {
  if (data) {
    processData(); // Function recreated every render
  }
}, [data, processData]); // Causes unnecessary re-runs
```

#### Performance-Critical Hooks
```typescript
// ✅ Good - avoid excessive API calls
useEffect(() => {
  const updateData = async () => {
    if (id) { // Only when id actually changes
      const data = await fetchData(id);
      // Update data
    }
  };
  updateData();
}, [id]); // Not [fetchData]

// ❌ Bad - function dependency causes re-runs
useEffect(() => {
  updateData();
}, [updateData]); // Recreated every render
```

### Error Recovery Patterns

#### General Retry Logic
```typescript
// ✅ Good - retry with backoff
const apiCall = async (retries = 1) => {
  try {
    const response = await fetch('/api/data');
    if (!response.ok) throw new Error('API Error');
    return await response.json();
  } catch (error) {
    if (retries > 0) {
      // Retry once after delay
      setTimeout(async () => {
        try {
          return await apiCall(retries - 1);
        } catch (retryError) {
          logger.error('API retry failed', retryError);
        }
      }, 2000);
    }
    throw error;
  }
};

// ❌ Bad - no retry logic
const apiCall = async () => {
  return fetch('/api/data').then(res => res.json());
};
```

### Debugging Store Issues

#### Store State Debugging
```typescript
// ✅ Good - structured debugging
const { data, isLoading, isInitialized } = useAppStore();

useEffect(() => {
  logger.debug('Store state changed', undefined, {
    hasData: !!data,
    isLoading,
    isInitialized,
    component: 'my-component'
  });
}, [data, isLoading, isInitialized]);

// ❌ Bad - minimal debugging
console.log(data); // Not helpful for complex state
```

#### Performance Monitoring
```typescript
// ✅ Good - monitor store performance
export function monitorStorePerformance(storeName: string) {
  return function<T extends Record<string, any>>(store: T): T {
    logger.debug('Performance monitoring enabled for store', undefined, { storeName });
    return store; // Non-intrusive monitoring
  };
}

// ❌ Bad - performance monitoring that breaks functionality
export function monitorStorePerformance(store) {
  return new Proxy(store, { /* complex proxy logic that breaks Zustand */ });
}
```